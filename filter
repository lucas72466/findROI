#include<opencv2/opencv.hpp>
#include<opencv2/imgproc/imgproc.hpp>
#include<iostream>
#include<opencv2/highgui/highgui.hpp>
#include<math.h>


using namespace cv;
using namespace std;

Vec3b target = Vec3b(73, 32, 23);


bool finderror(const Vec3b&color) {
	int range = 10;
	if (abs(color[2] - target[2]) > range) {
		return false;
	}
	if (abs(color[1] - target[1]) > range) {
		return false;
	}
	if (abs(color[0] - target[0]) > range) {
		return false;
	}
	return true;
}

int main() {
	int LowH = 156;
	int HighH = 180;

	int LowS = 175;
	int HighS = 255;

	int LowV = 240;
	int HighV = 255;
	Mat src = imread("blue2.jpg");
	Mat imgHSV;
	vector<Mat> hsvSplit;
	cvtColor(src, imgHSV, COLOR_BGR2HSV);

	split(imgHSV, hsvSplit);
	equalizeHist(hsvSplit[2], hsvSplit[2]);
	merge(hsvSplit, imgHSV);
	Mat imgThresholded;

	inRange(imgHSV, Scalar(LowH, LowS, LowV), Scalar(HighH, HighS, HighV), imgThresholded);

	Mat element = getStructuringElement(MORPH_RECT, Size(7, 7));
	morphologyEx(imgThresholded, imgThresholded, MORPH_OPEN, element);

	morphologyEx(imgThresholded, imgThresholded, MORPH_CLOSE, element);

	imshow("Thresholded Image", imgThresholded);
	imshow("Original", src);


	src = imgThresholded;
	//cvtColor(src, src, COLOR_RGB2GRAY);
	Mat matSrc = src;
	GaussianBlur(matSrc, matSrc, Size(5, 5), 0);
	vector<vector<Point> > contours;//contours的类型，双重的vector
	vector<Vec4i> hierarchy;//Vec4i是指每一个vector元素中有四个int型数据。
	//阈值
	threshold(matSrc, matSrc, 21, 255, THRESH_BINARY);
	//寻找轮廓，这里注意，findContours的输入参数要求是二值图像，二值图像的来源大致有两种，第一种用threshold，第二种用canny
	findContours(matSrc.clone(), contours, hierarchy, CV_RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, Point(0, 0));
	/// 计算矩
	vector<Moments> mu(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		mu[i] = moments(contours[i], false);
	}
	///  计算中心矩:
	vector<Point2f> mc(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		mc[i] = Point2f(mu[i].m10 / mu[i].m00, mu[i].m01 / mu[i].m00);
	}
	int j = 0;
	/// 绘制轮廓
	Mat drawing = Mat::zeros(matSrc.size(), CV_8UC1);
	vector<Moments> mn(contours.size());
	for (int i = 0; i < contours.size(); i++)
	{
		double area = contourArea(contours[i], true);
		if (area < -200) {
			Scalar color = Scalar(255);
			drawContours(drawing, contours, i, color, 2, 8, hierarchy, 0, Point());
			circle(drawing, mc[i], 4, color, -1, 8, 0);
			mn[j] = moments(contours[i], false);
			j++;

		}
		else {
			cout << "interfere" << endl;
		}
	}


	imshow("outImage", drawing);
	waitKey();
	return 0;





}
